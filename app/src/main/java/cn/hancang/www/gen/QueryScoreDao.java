package cn.hancang.www.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.hancang.www.greendao.QueryScore;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUERY_SCORE".
*/
public class QueryScoreDao extends AbstractDao<QueryScore, Long> {

    public static final String TABLENAME = "QUERY_SCORE";

    /**
     * Properties of entity QueryScore.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, long.class, "_id", true, "_id");
        public final static Property Tag = new Property(1, int.class, "tag", false, "TAG");
        public final static Property AreaName = new Property(2, String.class, "areaName", false, "AREA_NAME");
        public final static Property AreaId = new Property(3, String.class, "areaId", false, "AREA_ID");
        public final static Property Year = new Property(4, String.class, "year", false, "YEAR");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property TypeName = new Property(6, String.class, "typeName", false, "TYPE_NAME");
        public final static Property Batch = new Property(7, String.class, "batch", false, "BATCH");
        public final static Property BatchName = new Property(8, String.class, "batchName", false, "BATCH_NAME");
        public final static Property SchoolWords = new Property(9, String.class, "schoolWords", false, "SCHOOL_WORDS");
        public final static Property MajorWords = new Property(10, String.class, "majorWords", false, "MAJOR_WORDS");
        public final static Property Score = new Property(11, String.class, "score", false, "SCORE");
        public final static Property Rank = new Property(12, String.class, "rank", false, "RANK");
        public final static Property SchoolId = new Property(13, String.class, "schoolId", false, "SCHOOL_ID");
        public final static Property SchoolName = new Property(14, String.class, "schoolName", false, "SCHOOL_NAME");
    }


    public QueryScoreDao(DaoConfig config) {
        super(config);
    }
    
    public QueryScoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUERY_SCORE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: _id
                "\"TAG\" INTEGER NOT NULL ," + // 1: tag
                "\"AREA_NAME\" TEXT," + // 2: areaName
                "\"AREA_ID\" TEXT," + // 3: areaId
                "\"YEAR\" TEXT," + // 4: year
                "\"TYPE\" TEXT," + // 5: type
                "\"TYPE_NAME\" TEXT," + // 6: typeName
                "\"BATCH\" TEXT," + // 7: batch
                "\"BATCH_NAME\" TEXT," + // 8: batchName
                "\"SCHOOL_WORDS\" TEXT," + // 9: schoolWords
                "\"MAJOR_WORDS\" TEXT," + // 10: majorWords
                "\"SCORE\" TEXT," + // 11: score
                "\"RANK\" TEXT," + // 12: rank
                "\"SCHOOL_ID\" TEXT," + // 13: schoolId
                "\"SCHOOL_NAME\" TEXT);"); // 14: schoolName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUERY_SCORE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QueryScore entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
        stmt.bindLong(2, entity.getTag());
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(3, areaName);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(4, areaId);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(5, year);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(7, typeName);
        }
 
        String batch = entity.getBatch();
        if (batch != null) {
            stmt.bindString(8, batch);
        }
 
        String batchName = entity.getBatchName();
        if (batchName != null) {
            stmt.bindString(9, batchName);
        }
 
        String schoolWords = entity.getSchoolWords();
        if (schoolWords != null) {
            stmt.bindString(10, schoolWords);
        }
 
        String majorWords = entity.getMajorWords();
        if (majorWords != null) {
            stmt.bindString(11, majorWords);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(12, score);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(13, rank);
        }
 
        String schoolId = entity.getSchoolId();
        if (schoolId != null) {
            stmt.bindString(14, schoolId);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(15, schoolName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QueryScore entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
        stmt.bindLong(2, entity.getTag());
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(3, areaName);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(4, areaId);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(5, year);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(7, typeName);
        }
 
        String batch = entity.getBatch();
        if (batch != null) {
            stmt.bindString(8, batch);
        }
 
        String batchName = entity.getBatchName();
        if (batchName != null) {
            stmt.bindString(9, batchName);
        }
 
        String schoolWords = entity.getSchoolWords();
        if (schoolWords != null) {
            stmt.bindString(10, schoolWords);
        }
 
        String majorWords = entity.getMajorWords();
        if (majorWords != null) {
            stmt.bindString(11, majorWords);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(12, score);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(13, rank);
        }
 
        String schoolId = entity.getSchoolId();
        if (schoolId != null) {
            stmt.bindString(14, schoolId);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(15, schoolName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public QueryScore readEntity(Cursor cursor, int offset) {
        QueryScore entity = new QueryScore( //
            cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // tag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // areaName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areaId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // year
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // typeName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // batch
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // batchName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // schoolWords
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // majorWords
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // score
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // rank
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // schoolId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // schoolName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QueryScore entity, int offset) {
        entity.set_id(cursor.getLong(offset + 0));
        entity.setTag(cursor.getInt(offset + 1));
        entity.setAreaName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYear(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTypeName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBatch(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBatchName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSchoolWords(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMajorWords(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setScore(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRank(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSchoolId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSchoolName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QueryScore entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QueryScore entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QueryScore entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
