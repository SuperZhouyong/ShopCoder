package cn.hancang.www.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.hancang.www.greendao.MajorPerson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAJOR_PERSON".
*/
public class MajorPersonDao extends AbstractDao<MajorPerson, String> {

    public static final String TABLENAME = "MAJOR_PERSON";

    /**
     * Properties of entity MajorPerson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MajorId = new Property(0, String.class, "MajorId", true, "MAJOR_ID");
        public final static Property MajorName = new Property(1, String.class, "MajorName", false, "MAJOR_NAME");
        public final static Property MajorSchoolName = new Property(2, String.class, "MajorSchoolName", false, "MAJOR_SCHOOL_NAME");
    }


    public MajorPersonDao(DaoConfig config) {
        super(config);
    }
    
    public MajorPersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAJOR_PERSON\" (" + //
                "\"MAJOR_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: MajorId
                "\"MAJOR_NAME\" TEXT," + // 1: MajorName
                "\"MAJOR_SCHOOL_NAME\" TEXT);"); // 2: MajorSchoolName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAJOR_PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MajorPerson entity) {
        stmt.clearBindings();
 
        String MajorId = entity.getMajorId();
        if (MajorId != null) {
            stmt.bindString(1, MajorId);
        }
 
        String MajorName = entity.getMajorName();
        if (MajorName != null) {
            stmt.bindString(2, MajorName);
        }
 
        String MajorSchoolName = entity.getMajorSchoolName();
        if (MajorSchoolName != null) {
            stmt.bindString(3, MajorSchoolName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MajorPerson entity) {
        stmt.clearBindings();
 
        String MajorId = entity.getMajorId();
        if (MajorId != null) {
            stmt.bindString(1, MajorId);
        }
 
        String MajorName = entity.getMajorName();
        if (MajorName != null) {
            stmt.bindString(2, MajorName);
        }
 
        String MajorSchoolName = entity.getMajorSchoolName();
        if (MajorSchoolName != null) {
            stmt.bindString(3, MajorSchoolName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MajorPerson readEntity(Cursor cursor, int offset) {
        MajorPerson entity = new MajorPerson( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // MajorId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MajorName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // MajorSchoolName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MajorPerson entity, int offset) {
        entity.setMajorId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMajorName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMajorSchoolName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MajorPerson entity, long rowId) {
        return entity.getMajorId();
    }
    
    @Override
    public String getKey(MajorPerson entity) {
        if(entity != null) {
            return entity.getMajorId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MajorPerson entity) {
        return entity.getMajorId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
